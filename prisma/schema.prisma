// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// -----------------------------
// User accounts (client + admins)
// -----------------------------
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  phone       String?
  role        Role      @default(CUSTOMER)
  bookings    Booking[]
  inquiries   Inquiry[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}

// -----------------------------
// Services (tours, flights, accommodation, etc.)
// -----------------------------
model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// -----------------------------
// Bookings (link travelers to services)
// -----------------------------
model Booking {
  id            String     @id @default(cuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  service       Service    @relation(fields: [serviceId], references: [id])
  serviceId     String
  date          DateTime
  groupSize     Int        @default(1)
  status        BookingStatus @default(PENDING)
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

// -----------------------------
// Inquiries
// -----------------------------
model Inquiry {
  id          String    @id @default(cuid())
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  name        String?
  email       String
  phone       String?
  message     String
  status      InquiryStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum InquiryStatus {
  OPEN
  RESOLVED
}